<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on nishihi6</title>
    <link>https://nishihi6.github.io/blog/posts/</link>
    <description>Recent content in Posts on nishihi6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 26 Aug 2023 18:46:37 +0900</lastBuildDate><atom:link href="https://nishihi6.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DirectX12の描画処理 #2 [Devlog #003]</title>
      <link>https://nishihi6.github.io/blog/posts/devlog_dx12_02/</link>
      <pubDate>Sat, 26 Aug 2023 18:46:37 +0900</pubDate>
      
      <guid>https://nishihi6.github.io/blog/posts/devlog_dx12_02/</guid>
      <description>DirectX12を使った描画処理 環境構築の続き プリコンパイル済みヘッダーの追加 Sourceフォルダ以下にstdafx.hとstdafx.cppと追加
dev-dx12-202308（プロジェクト名） └─ Source ├─ Application │ ├─ Application.h │ └─ Application.cpp ├─ Graphics ├─ System │ └─ Window │ ├─ Window.h │ └─ Window.cpp ├─ stdafx.h └─ stdafx.cpp プロジェクトのプロパティの設定からプリコンパイル済みヘッダーを使用(/Yu)に設定（プリコンパイル済みヘッダーファイルはstdafx.h）
プロジェクトのプロパティの設定から必ず使用されるインクルードファイルにstdafx.hを追加設定
追加したstdafx.cppのプロパティの設定からプリコンパイル済みヘッダーを作成(/Yc)に設定（プリコンパイル済みヘッダーファイルはstdafx.h）
以下コード
// stdafx.h #pragma once // 基本 #pragma comment(lib,&amp;#34;winmm.lib&amp;#34;) #define NOMINMAX #include &amp;lt;Windows.h&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;cassert&amp;gt; #include &amp;lt;wrl/client.h&amp;gt; // STL #include &amp;lt;map&amp;gt; #include &amp;lt;unordered_map&amp;gt; #include &amp;lt;unordered_set&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;array&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;list&amp;gt; #include &amp;lt;iterator&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;memory&amp;gt; #include &amp;lt;random&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;sstream&amp;gt; #include &amp;lt;functional&amp;gt; #include &amp;lt;thread&amp;gt; #include &amp;lt;atomic&amp;gt; #include &amp;lt;mutex&amp;gt; #include &amp;lt;future&amp;gt; #include &amp;lt;fileSystem&amp;gt; #include &amp;lt;chrono&amp;gt; #define _USE_MATH_DEFINES #include &amp;lt;math.</description>
    </item>
    
    <item>
      <title>CG理論#1 レンダリングパイプライン [Devlog #002]</title>
      <link>https://nishihi6.github.io/blog/posts/devlog_cg_01/</link>
      <pubDate>Thu, 24 Aug 2023 15:22:11 +0900</pubDate>
      
      <guid>https://nishihi6.github.io/blog/posts/devlog_cg_01/</guid>
      <description>CG屋さんのバイブル：Real Time Rendering Fourth Edition を読んで理解したことについてを要約します（内容の転載を避け、詳しく説明しすぎないように配慮します）
レンダリングパイプライン レンダリングパイプラインの主な機能は、視点（仮想カメラ）、光源、３次元オブジェクトから２次元イメージをレンダーすること
（２次元イメージ中の）オブジェクトの位置と形を決定するもの
幾何学形状（ジオメトリ） 環境特性 カメラ配置 （２次元イメージ中の）オブジェクトの見た目を決定するもの
マテリアル特性 光源 表面テクスチャ シェーディングの式 アーキテクチャ レンダリングパイプラインはいくつかのステージからなり1、スピードアップを主な目的として並列に実行される
主なステージ（各々でさらにいくつかのサブステージで構成される）
アプリケーション（衝突検出、アニメーション、物理シミュレーションなど） ジオメトリ処理（座標変換、投影などの幾何学的処理） ラスタライズ（3つの頂点から三角形の内側のピクセルを求める） ピクセル処理（ピクセル単位での処理（色や深度など）） フレーム間に実行する計算の複雑さによってフレーム/秒が変化し、これによりレンダリングの性能を表すことが一般的
アプリケーション 開発者はこのアプリケーションステージで何が起こるのかを制御する
アプリによって一番の違いが見られるのはレンダリングパイプラインの中でもこのアプリケーションステージであると思われる
アプリケーションの作業は基本的にCPU上で実行するが、コンピュートシェーダーを使ってGPU上で実行することもある
レンダーすべきジオメトリ（点、直線、三角形）をジオメトリ処理ステージに渡すのが主なタスク
ユーザからの入力情報を扱ったり、描画する必要がないポリゴンを求めるカリングアルゴリズムを実行したりと様々な処理を行う
ジオメトリ処理 ジオメトリ処理ステージでは、幾何学形状（ジオメトリ）を三角形単位と頂点単位で操作する
ジオメトリ処理ステージのサブステージ（機能ステージ）
頂点シェーディング 投影 クリッピング スクリーンマッピング 頂点シェーディング 頂点シェーディングでは、頂点位置を計算し、頂点出力データにもたせる法線やテクスチャ座標などを評価する
頂点シェーダーのもともとの仕組み2
各頂点の位置と法線に光源を適用して色を計算 頂点の色を三角形上で補間 頂点シェーダーは各頂点に関連付けたデータの設定を行う
頂点の計算
モデル空間にモデルが存在（モデルのいずれかの頂点や近傍などに原点をとる） モデル変換により、モデルごとにモデル空間内での位置と向きが決まる オブジェクトはモデル座標（＝ローカル座標：モデル空間の座標）をもち、モデル変換が適用されると、ワールド空間内でのワールド座標が決まる カメラ空間での頂点の計算
ビュー変換により、カメラを原点としたカメラ空間での座標が決まる
（視線がZ軸（負or正）方向、上がY軸、右がX軸 ※API依存） モデル変換とビュー変換のいずれも4×4行列として実装できる
シェーディング
シェーディングでは、各オブジェクトのマテリアルとそれを照らす光源による効果を決定する見た目のモデル化を行う
各点におけるシェーディングの式の計算は、ジオメトリ処理の間に行うものもあれば、ピクセル単位の処理で行うものもある
続くステージに出力する色、ベクトル、テクスチャ座標、その他のシェーディングデータは、頂点ごとに格納されたマテリアルデータ（点の位置、色、シェーディング式の評価に必要な数値情報など）を用いて算出される
投影からクリッピングへ
正準ビューボリュームは、端点が(-1,-1,-1)と(1,1,1)にある単位立方体で、0 &amp;lt;= z &amp;lt;= 1等のボリュームを使って定義される
頂点シェーダーが行う投影
正投影（平行投影） -&amp;gt; 直方体のから単位立方体に変換 透視投影 -&amp;gt; ピラミッド形状の錐台から単位立方体に変換 その他：斜投影や不等角投影など 変換はいずれも4×4行列として実装できる</description>
    </item>
    
    <item>
      <title>DirectX12の描画処理 #1 [Devlog #001]</title>
      <link>https://nishihi6.github.io/blog/posts/devlog_dx12_01/</link>
      <pubDate>Wed, 23 Aug 2023 01:19:34 +0900</pubDate>
      
      <guid>https://nishihi6.github.io/blog/posts/devlog_dx12_01/</guid>
      <description>DirectX12を使った描画処理 環境構築 VisualStudio2022でプロジェクトの作成 (新規作成-&amp;gt;プロジェクト-&amp;gt;)新しいプロジェクトの作成-&amp;gt;空のプロジェクト プロジェクト名（ソリューション名）と保存パスを指定 &amp;ldquo;ソリューションとプロジェクトを同じディレクトリに配置する&amp;quot;にチェック 作成 ソリューションのプロパティを変更 構成プロパティ-&amp;gt;リンカー-&amp;gt;システム-&amp;gt;サブシステム &amp;ldquo;コンソール&amp;quot;から&amp;quot;Windows&amp;quot;に変更 以下のようにフォルダを構成 新しいフォルダを作成 フォルダに新しい項目を追加（以降説明省略） Applicationフィルターに新しい項目を追加 .cpp 名前：Application.cpp 場所：Source/Application（フォルダを作成） .h 名前：Application.h 場所：Source/Application dev-dx12-202308（プロジェクト名） └─ Source ├─ Application │ ├─ Application.h │ └─ Application.cpp └─ Graphics Application.h Applicationクラス 実行を行うExecute()関数を宣言し、Applicationクラスオブジェクトを生成するInstance()関数を定義する（シングルトン）
// Application.h // Applicationクラス class Application { public: void Execute(); static Application&amp;amp; Instance() { static Application instance; return instance; } private: Window m_window; Application() {} } Application.cpp Windows.hのインクルード WindowsプログラムのためにWindows.hをインクルード（Windowsプログラムの型や構造体、定数、ファンクションコールが定義されている） （※Windows.hとWindow.hの混同に注意）
Windowsプログラムにmain()関数は無く、WinMain()関数からプログラムが開始される
WinMain()関数 WINAPIはWindows.hでWin32 API 関数を呼び出すときの規約として定義される。#define WINAPI __stdcall</description>
    </item>
    
    <item>
      <title>My First Post（記事作成に関する備忘録）</title>
      <link>https://nishihi6.github.io/blog/posts/my-first-post/</link>
      <pubDate>Tue, 22 Aug 2023 06:05:10 +0900</pubDate>
      
      <guid>https://nishihi6.github.io/blog/posts/my-first-post/</guid>
      <description>&lt;p&gt;Hello world! It&amp;rsquo;s me!&lt;/p&gt;
 &lt;img src=&#34;../img/itsme.jpg&#34; width=&#34;200px&#34;&gt;
&lt;p&gt;以下、記事作成のマニュアル&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
